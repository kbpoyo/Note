<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><highlight page="14" rect="75.522,59.535,204.592,84.110" color="#FFCD45" flags="print" name="04cb275e-3261-46fc-51a8-beb3599603d6" title="Guest" subject="高亮" date="D:20220701001513+08'00'" creationdate="D:20220701001513+08'00'" coords="75.52161400000001,84.10988621403249,204.59194444999997,84.10988621403249,75.52161400000001,59.534645641846964,204.59194444999997,59.534645641846964"><contents>LinkedList实践</contents></highlight><highlight page="1" rect="75.522,789.625,198.450,814.200" color="#FFCD45" flags="print" name="79bda512-548d-77c2-69df-5d09b6cbf90e" title="Guest" subject="高亮" date="D:20220701001528+08'00'" creationdate="D:20220701001528+08'00'" coords="75.52161400000001,814.1999742140324,198.45035844999998,814.1999742140324,75.52161400000001,789.6247336418468,198.45035844999998,789.6247336418468"><contents>ArrayList 实践</contents></highlight><highlight page="34" rect="88.484,444.428,147.812,465.682" color="#FFCD45" flags="print" name="99fe4728-50af-d267-7a79-0537e446b3ba" title="Guest" subject="高亮" date="D:20220701221953+08'00'" creationdate="D:20220701221953+08'00'" coords="88.48446700000001,465.68248999592004,147.81181819999998,465.68248999592004,88.48446700000001,444.4282278794352,147.81181819999998,444.4282278794352"><contents>List总结</contents></highlight><highlight page="34" rect="75.522,86.940,517.295,129.819" color="#FFCD45" flags="print" name="8cd8834e-d458-978a-bff8-8123ccba144e" title="Guest" subject="高亮" date="D:20220701222640+08'00'" creationdate="D:20220701222640+08'00'" coords="78.055504,129.81892459545008,517.2952580000001,129.81892459545008,78.055504,116.95419249114798,517.2952580000001,116.95419249114798,75.52161400000001,114.81195959545005,399.235891,114.81195959545005,75.52161400000001,101.94722749114806,399.235891,101.94722749114806,75.52161400000001,99.80498559545003,453.0002040000001,99.80498559545003,75.52161400000001,86.94025349114804,453.0002040000001,86.94025349114804"><contents>快速失败，例如在arrayList中使用迭代器遍历时，有另外的线程对arrayList的存储数组进行了改变，比
如add、delete、等使之发生了结构上的改变，所以Iterator就会快速报一个
java.util.ConcurrentModiﬁcationException 异常（并发修改异常），这就是快速失败。</contents></highlight><highlight page="35" rect="75.522,784.167,516.805,811.886" color="#FFCD45" flags="print" name="35c29823-b51f-5634-ef64-fc76a9eb1b54" title="Guest" subject="高亮" date="D:20220701222702+08'00'" creationdate="D:20220701222702+08'00'" coords="78.055504,811.8863915954499,516.8047960000001,811.8863915954499,78.055504,799.021659491148,516.8047960000001,799.021659491148,75.52161400000001,796.76511042181,338.8941130000001,796.76511042181,75.52161400000001,784.167116131773,338.8941130000001,784.167116131773"><contents>安全失败，在java.util.concurrent下的类，都是线程安全的类，他们在迭代的过程中，如果有线程进行
结构的改变，不会报异常，而是正常遍历，这就是安全失败。</contents></highlight><highlight page="35" rect="75.522,693.223,519.220,751.108" color="#FFCD45" flags="print" name="0df45346-2433-2697-5201-115767bbd920" title="Guest" subject="高亮" date="D:20220701222816+08'00'" creationdate="D:20220701222816+08'00'" coords="78.055504,751.10813259545,519.219544,751.10813259545,78.055504,738.243400491148,519.219544,738.243400491148,75.52161400000001,735.9868514218101,504.7212420000002,735.9868514218101,75.52161400000001,723.3888571317731,504.7212420000002,723.3888571317731,75.52161400000001,720.97989342181,514.4757790000002,720.97989342181,75.52161400000001,708.3818991317729,514.4757790000002,708.3818991317729,75.52161400000001,706.0872585954498,466.712636,706.0872585954498,75.52161400000001,693.2225264911478,466.712636,693.2225264911478"><contents>在concurrent下的集合类增加元素的时候使用Arrays.copyOf()来拷贝副本，在副本上增加元素，如果有
其他线程在此改变了集合的结构，那也是在副本上的改变，而不是影响到原集合，迭代器还是照常遍
历，遍历完之后，改变原引用指向副本，所以总的一句话就是如果在此包下的类进行增加删除，就会出
现一个副本。所以能防止fail-fast，这种机制并不会出错，所以我们叫这种现象为fail-safe。</contents></highlight><highlight page="35" rect="75.522,602.583,518.019,660.316" color="#FFCD45" flags="print" name="d2276d53-7ab3-03ee-d248-d47f525e16cb" title="Guest" subject="高亮" date="D:20220701222849+08'00'" creationdate="D:20220701222849+08'00'" coords="78.055504,660.31595759545,518.019257,660.31595759545,78.055504,647.451225491148,518.019257,647.451225491148,75.52161400000001,645.30899959545,501.3632880000001,645.30899959545,75.52161400000001,632.444267491148,501.3632880000001,632.444267491148,75.52161400000001,630.3020415954501,511.6131610000001,630.3020415954501,75.52161400000001,617.4373094911481,511.6131610000001,617.4373094911481,75.52161400000001,615.1807604218102,95.03068800000003,615.1807604218102,75.52161400000001,602.5827661317732,95.03068800000003,602.5827661317732"><contents>这里搞清楚一个问题，并不是说线程安全的集合就不会报fail-fast，而是报fail-safe，你得搞清楚前面所
说答案的原理，出现fail-safe是因为他们在实现增删的底层机制不一样，就像上面说的，会有一个副
本，而像arrayList、linekdList、verctor等，他们底层就是对着真正的引用进行操作，所以才会发生异
常。</contents></highlight><highlight page="35" rect="75.522,512.541,516.066,555.267" color="#FFCD45" flags="print" name="be621c71-3caf-a3d5-67f5-0d8af9e7e161" title="Guest" subject="高亮" date="D:20220701222945+08'00'" creationdate="D:20220701222945+08'00'" coords="78.055504,555.26718959545,516.066427,555.26718959545,78.055504,542.402457491148,516.066427,542.402457491148,75.52161400000001,540.1458474218101,514.4757790000002,540.1458474218101,75.52161400000001,527.5478531317731,514.4757790000002,527.5478531317731,75.52161400000001,525.13888942181,202.33059500000007,525.13888942181,75.52161400000001,512.5408951317729,202.33059500000007,512.5408951317729"><contents>首先，我们迭代的时候，根本就没用到集合中的删除、增加，查询的操作，就拿vector来说，我们都没
有用那些加锁的方法，也就是方法锁放在那没人拿，在迭代的过程中，有人拿了那把锁，我们也没有办
法，因为那把锁就放在那边。</contents></highlight></annots><pages><defmtx matrix="1,0,0,-1,0,841.92"/></pages></xfdf>